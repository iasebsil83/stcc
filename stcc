#!/usr/bin/python3






# -------- IMPORTATIONS --------

#system
import os, sys






# -------- DECLARATIONS --------

#default compilation flags
GCC_DEFAULT_FLAGS = "-Wall -O2 "






# -------- STD TOOLS --------

#remove every indexes in given list
def Lst_removeAll(l, to_remove):
	result = []
	for i in range(len(l)):
		if i not in to_remove:
			result.append(l[i])
	return result

#any error
def Err_raise(prefix, msg):
	sys.stderr.write(prefix + " ERROR > " + msg + "\n")

#runtime error
def Err_runtime(msg):
	Err_raise("RUNTIME", msg)

#fatal error
def Err_fatal(msg, err_code=1):
	Err_raise("FATAL", msg)
	exit(err_code)

def Path_name(path):
	if '.' in path:
		return '.'.join( path.split('.')[:-1] )
	return path






# -------- EXECUTION --------

#main
def main(args):

	# INITIALIZATION

	#options
	abstract_shl_locations = False
	generate_shl           = False
	force_output           = False
	keep_object_files      = False
	output_filename        = ""
	use_some_shl           = False

	#compilation
	dot_extension = ""
	object_files  = []
	gcc_commands  = []



	# PARSING

	#for each argument
	indexes_to_remove = []
	args = args[1:]
	for a in range(len(args)):

		#option detected
		if args[a][0] == '-': # (args can't contain empty strings)

			#help menu
			if args[a] in ("-h", "--help"):
				print("Usage: stcc [options] <file.c>")
				print("Simplest & Tiniest C Compiler")
				print()
				print("Options:")
				print("  -a, --abstract      : Do not hard-write shared libraries locations in result.")
				print("                        [Only available for executable compilation]")
				print("  -e, --executable    : Compile into executable. (default target)")
				print("  -f, --force         : Output result even if file already exists.")
				print("  -k, --keep-tmp-obj  : Keep temporarily generated object files.")
				print("  -o, --output <name> : Give the name of the result to produce (extension included).")
				print("  -s, --shared        : Compile into a shared library.")
				print("                        Several files are allowed with this option.")
				print("                        The output name will be taken from the first one given.")
				print("  -u, --use-shl       : Link some shared libraries (first is C source, others are shl).")
				print("                        Each shared library must be given in absolute path.")
				print("                        [Only available for executable compilation]")
				print()
				print("NOTE: -e & -s are not compatible together.")
				print("      You cannot generate both a shared library AND an executable.")
				print("      The last option given will be taken into account.")
				print()
				exit(0)

			#option : abstract shl locations
			elif args[a] in ("-a", "--abstract"):
				abstract_shl_locations = True

				#remove from arguments
				indexes_to_remove.append(a)

			#option : executable
			elif args[a] in ("-e", "--executable"):
				generate_shl = False

				#remove from arguments
				indexes_to_remove.append(a)

			#option : force writing output
			elif args[a] in ("-f", "--force"):
				force_output = True

				#remove from arguments
				indexes_to_remove.append(a)

			#option : keep temporary object files
			elif args[a] in ("-k", "--keep-tmp-obj"):
				keep_object_files = True

				#remove from arguments
				indexes_to_remove.append(a)

			#option : output
			elif args[a] in ("-o", "--output"):
				if len(args) < a+2:
					Err_fatal("Missing output name after option '-o/--output'.")

				#set output_filename
				output_filename = args[a+1]

				#remove from arguments
				indexes_to_remove.append(a)
				indexes_to_remove.append(a+1)

			#option : shared library
			elif args[a] in ("-s", "--shared"):
				generate_shl = True

				#remove from arguments
				indexes_to_remove.append(a)

			#option : use given dynamic libraries
			elif args[a] in ("-u", "--use"):
				use_some_shl = True

				#remove from arguments
				indexes_to_remove.append(a)

			#undefined option
			else:
				Err_fatal("Unknown option '" + args[a] + "'.")

	#update argument list
	args = Lst_removeAll(args, indexes_to_remove)

	#no arguments left
	if len(args) == 0:
		Err_fatal("Missing source file(s).")



	# PREPARE COMPILATION COMMAND

	#case 1 : dynlib mode
	if generate_shl:

		#add every given file
		for f in args:

			#check validity of C source
			if not os.path.isfile(f):
				Err_fatal("C source '" + f + "' is not a file.")

			#prepare it for beeing compiled into object
			object_files.append(Path_name(os.path.basename(f)) + ".o")
			gcc_commands.append("gcc " + GCC_DEFAULT_FLAGS + "-fPIC -c " + f)

		#set gcc command into dynlib generation
		dot_extension = ".shl"
		gcc_commands.append("gcc -shared " + ' '.join(object_files) )

	#case 2 : executable mode
	else:

		#require one argument (no shl) or more (shl)
		if len(args) == 1:
			if use_some_shl:
				Err_fatal("You must specify at least 1 shared library.")
		elif not use_some_shl:
			Err_fatal("Only 1 argument is allowed (only 1 C source at a time).")

		#check validity of C source
		if not os.path.isfile(args[0]):
			Err_fatal("C source '" + args[0] + "' is not a file.")

		#set gcc command into executable generation
		dot_extension = "" #no extension
		gcc_commands.append("gcc " + GCC_DEFAULT_FLAGS + args[0])

		#use shared libraries
		if use_some_shl:

			#for each library given
			shl_dirs = []
			for s in args[1:]:

				#check validity of dynamic library
				if not os.path.isfile(s):
					Err_fatal("Shared library '" + s + "' is not a file.")

				#store their locations
				dir = os.path.dirname(s)
				if dir not in shl_dirs:
					shl_dirs.append(dir)

				#list required libraries
				gcc_commands[0] += " -l:" + os.path.basename(s)

			#add library paths as well
			shl_locations = ':'.join(shl_dirs)
			for sl in shl_dirs:
				gcc_commands[0] += " -L" + sl
			if not abstract_shl_locations:
				for sl in shl_dirs:
					gcc_commands[0] += " -Wl,-rpath=" + sl

	#set output filename (if needed)
	if len(output_filename) == 0:
		output_filename = Path_name(os.path.basename(args[0])) + dot_extension

	#prevent from smashing already existing file
	if not force_output:
		if os.path.isfile(output_filename):
			Err_fatal("Output file '" + output_filename + "' already exists.")

	#add output option to last gcc command
	gcc_commands[-1] += " -o " + output_filename



	# COMPILE

	#run GCC commands
	for cmd in gcc_commands:
		err = os.system(cmd)
		if err:
			Err_fatal("Error executing gcc command '" + cmd + "'.", err_code=err)

	#remove temporarily generated .o files
	if not keep_object_files:
		for o in object_files:
			if os.remove(o):
				Err_runtime("Unable to remove file '" + o + "'.")

#run main
main(sys.argv)
